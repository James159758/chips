--@name Telekinesis
--@shared



clientVar = function()
    KEYS = {}
    KEYS["reload"]  = 28
    KEYS["attack1"] = 107
    KEYS["attack2"] = 108


end


serverVar = function()
    ORBIT = {}
    ORBIT["Speed"]     = 5
    ORBIT["Height"]    = 200
    ORBIT["Distance"]  = 200
    ORBIT["Angle"]     = 0
    ORBIT["toggle"]    = false
    
    
    GrabbedProps = {}
end

local mainClient = function()
    clientVar()
    
    
    local function sendData(data)
        net.start("connection")
        net.writeTable(data)
        net.send()
    end
    
    
    local function addElement(ply)
        local data = {flag = "addElement"}
        
        data["ply"] = ply
        
        sendData(data)
    end
    
    
    local function reset()
        local data = {flag = "reset"}
        
        sendData(data)
    end


    local function toggle(switch)
        local data = {flag = "toggle"}
        
        data["switch"] = switch
        
        sendData(data)
    end
    
    
    local function isWeapon(ply)
        local _find = "crowbar.mdl"
        suc, resu = pcall(function()
                              local weaponEntity = ply:getActiveWeapon()
                              local weaponModel = weaponEntity:getModel()
                            return string.endsWith(weaponModel, _find)
                          end)

        return resu
    end
    
    
    local function keyManager(ply, key, down)
        if(ply == owner()) then
            if isWeapon(ply) then
                
                if(key == KEYS["attack2"] && down == true) then
                    addElement(ply)
                
                
                elseif(key == KEYS["reload"] && down == true) then
                    reset()
                
                
                elseif(key == KEYS["attack1"]) then
                    if(down == true) then
                        toggle(true)
                    else
                        toggle(false)
                    end   
                end
                return nil
            end
            toggle(false)
        end
    end



    hook.add("inputPressed",  "", function(key) keyManager(owner(), key, true)  end)
    hook.add("inputReleased", "", function(key) keyManager(owner(), key, false) end)
end


local mainServer = function()
    serverVar()
    
    
    local function addElement(ply)
        local entityEye = ply:getEyeTrace()["Entity"]
        
        if(entityEye:isNPC()) then return end
        
        local isOwnerEntity = (entityEye:getOwner() == ply)
        local isFrozen = not (entityEye:isFrozen())
        local isAlreadyExist = not table.hasValue(GrabbedProps, entityEye)
        
        if(isOwnerEntity && isFrozen && isAlreadyExist) then
            table.insert(GrabbedProps, entityEye)
        end
    end
    
    
    local function resetTable()
        table.empty(GrabbedProps)
    end
    
    
    local function toggle(switch)
        ORBIT["toggle"] = switch
    end


    local function _cos(degrees)
        return math.cos(math.rad(degrees))
    end


    local function _sin(degrees)
        return math.sin(math.rad(degrees))
    end


    local function orbitEffect()
        ORBIT["Angle"] = (ORBIT["Speed"] + ORBIT["Angle"]) % 360
        local SeparationAngle = 360 / table.count(GrabbedProps)
        for index, entity in ipairs(GrabbedProps) do
            
            
            local OffsetAngle = ORBIT["Angle"] + SeparationAngle * index
            local newVector = Vector(ORBIT["Distance"] * _cos(OffsetAngle),
                                     ORBIT["Distance"] * _sin(OffsetAngle),
                                     ORBIT["Height"])
            local TargetPos =  owner():getPos() + newVector
            
            local succ, result = pcall(
                 function()
                     local ForceVec  = (TargetPos - entity:getPos() - entity:getVelocity() * 0.25) * entity:getMass()
                     entity:applyForceCenter(ForceVec) -- Smooth movement
                     --entity:setPos(TargetPos) -- Teleporting movement
                 end)
            if(not succ) then
                table.remove(GrabbedProps, index)
                continue
            end 
        end    
    end


    local function orbitAttack()
        for index, entity in ipairs(GrabbedProps) do
            
            local TargetPos = owner():getEyeTrace()["HitPos"]
            local succ, result = pcall(
                function()
                    local ForceVec  = (TargetPos - entity:getPos()) * entity:getMass()
                    entity:applyForceCenter(ForceVec)
                end)
            
            if(not succ) then
                table.remove(GrabbedProps, index)
                continue
            end
        end    
    end
    
    
    
    net.receive("connection", function(len, ply)
        if(ply != owner()) then
            return nil
        end
        local data = net.readTable()
        if(data["flag"] == "addElement") then
            addElement(data["ply"])
        elseif(data["flag"] == "reset") then
            resetTable()
        elseif(data["flag"] == "toggle") then
            toggle(data["switch"])        
        end
    end)
    
    
    hook.add("tick", "", function()
        if(ORBIT["toggle"]) then
            orbitAttack()
        else 
            orbitEffect()
        end
    end)
end




if SERVER then
    mainServer()
else
    mainClient()
end

@name Telekinesis
@strict
@persist GrabbedProps:array ORBIT:table


ORBIT = table()
ORBIT["Speed"]    = 1
ORBIT["Height"]   = 200
ORBIT["Distance"] = 200
ORBIT["Angle"]    = 0
ORBIT["toggle"]   = 0



function isCrowbar(Ply:entity){
    let Weapon = Player:weapon()
    let WeaponType = Weapon:type()
    let Item = "weapon_crowbar"
    return WeaponType == Item
}


function hasValue(T:array, E:entity){
    foreach(Index:number, Value:entity = T){
        if(Value == E){
            return 1
        }
    }
    return 0
}


function changeEntity(E:entity){
    #E:setTrails(255, 255, 25, "trails/laser", vec(255, 255, 255), 255)
    ##setfLight(vector pos,vector color,angle ang,string material,number fov,number farz,number nearz)
    #E:setfLight(E:pos(), vec(255, 255, 255), E:angles(), "models/alyx/emptool_glow", 999, 999, 999)
    ##entity:setdLight(vector pos,vector color,number brightness,number size,number delay)
    ##E:setdLight(E:pos(), vec(255, 255, 255), 999, 999, 1)
}


function getRange(){
    #[
    rangerFilter(GrabbedProps)
    rangerFilter(owner())
    let RangerData = rangerOffset(16384, owner():shootPos(), owner():eye())
    ]#
    return owner():eyeTrace()
}

function keyListener(Player:entity, Key:string, Down:number){
    if(Player == owner()){
        if(isWeapon(Player)){
            
            if(Key == "attack2" && Down == 1){
                let PickedEntity = getRange():entity()
                if(!PickedEntity){
                    return void
                }
                let IsOwnerEntity = (PickedEntity:owner() == Player)
                let IsFrozen = !PickedEntity:isFrozen()
                let IsAlreadyExist = !hasValue(GrabbedProps, PickedEntity)
                
                if(IsOwnerEntity && IsFrozen && IsAlreadyExist){
                    changeEntity(PickedEntity)
                    GrabbedProps:pushEntity(PickedEntity)
                }
            }
            
            elseif(Key == "reload" && Down == 1){
                GrabbedProps:clear()
            }
            
            elseif(Key == "attack"){
                if(Down == 1){
                    ORBIT["toggle"] = 1
                } else {
                    ORBIT["toggle"] = 0
                }
            }
            
            
            return void
        }
        ORBIT["toggle"] = 0
    }
}


function orbitEffect(){
    ORBIT["Angle"] = ORBIT["Speed", number] + ORBIT["Angle", number]
    let SeparationAngle = 360 / GrabbedProps:count()
    foreach(Index:number, Prop:entity = GrabbedProps){
        let OffsetAngle = ORBIT["Angle", number] + SeparationAngle * Index
        let NewVector = vec(ORBIT["Distance", number] * cos(OffsetAngle),
                            ORBIT["Distance", number] * sin(OffsetAngle),
                            ORBIT["Height", number])
        let TargetPos = owner():pos() + NewVector
        try {
            let ForceVec  = (TargetPos - Prop:pos() - Prop:vel() * 0.25) * Prop:mass()
            Prop:applyForce(ForceVec)
        } catch(E:string){
            GrabbedProps:removeEntity(Index)    
        }
    }
}


function orbitAttack(){
    TargetPos = getRange():pos()
    foreach(Index:number, Prop:entity = GrabbedProps){
        try{
            let ForceVec = (TargetPos - Prop:pos()) * Prop:mass()
            Prop:applyForce(ForceVec)
        } catch(E:string){
            GrabbedProps:removeEntity(Index)
        }
    }
}



event keyPressed(Player:entity, Key:string, Down:number, Bind:string){keyListener(Player, Bind, Down)}


event tick(){
    if(ORBIT["toggle", number] == 1){
        orbitAttack()
    } else {
        orbitEffect()
    }
}

